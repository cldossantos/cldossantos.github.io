{
  "hash": "d03e3cadd2bfffdefc187307fc495e51",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Remote sensing of NYC Central Park\"\nauthor: \"Caio dos Santos\"\ndate: \"2024-12-16\"\ncategories: [pacu, remote sensing]\n---\n\n\nI thought it would be interesting to look at how to retrieve remotely sensed data from Sentinel-2 using the [pacu package](https://github.com/cldossantos/pacu). For this example, I decided to take a look at the Central Park in New York city. Although it is not an agricultural setting, it is public large vegetated area.\n\nThe framework to download, process, and visualize the data for an agricultural field would be nearly identical. The one big difference would be the geographical coordinates. These would have to point to the targeted agricultural field.\n\nFirst, we can start by loading the libraries we will need for this task.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pacu)\nlibrary(sf)\n```\n:::\n\n\nIf you have not installed these libraries, you can do so by running\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"pacu\")\n```\n:::\n\n\n\n\nNow, we can define our area of interest. In this case, we will define the Central Park as our targeted area.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncentral.park <- read_sf('./central-park.shp', quiet = TRUE)\n```\n:::\n\n\nThe first step to retrieve Sentinel-2 data is to register with [Copernicus Data Space](https://dataspace.copernicus.eu/). Please check the package vignettes -more specifically the satellite data vignette- for more information on registering. You can also check the help page for the function *pa_initialize_dataspace()*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?pa_initialize_dataspace\n```\n:::\n\n\nWe can browse the Data Space catalog and check how many images will meet our search parameters. In this case, I am searching for images covering the Central Park between May and October, with 20% or less cloud coverage.\n\nWe can see that there are a total of 21 images the meet our criteria.\n\n\n::: {.cell}\n\n```{.r .cell-code}\navailable.images <- pa_browse_dataspace(aoi = central.park,\n                                        start.date = '2023-05-01',\n                                        end.date = '2023-10-30',\n                                        max.cloud.cover = 20)\navailable.images\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSearch parameters\nStart date: 2023-05-01 \nEnd date: 2023-10-30 \nMax. cloud cover: 20%\nCollection name:  SENTINEL-2 \n\nResults\nTotal:  21 \nOnline:  21 \n```\n\n\n:::\n:::\n\n\nThe *summary()* function can be used to tell us how many images we have available for every month.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(available.images)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n------------------\nYear  Month  Count \n---   ---    ---   \n2023  5      6     \n2023  6      2     \n2023  7      3     \n2023  8      3     \n2023  9      4     \n2023  10     3     \n------------------\nTotal \t21 \n```\n\n\n:::\n:::\n\n\nLet us take a look at an image from May, one from July, and one from October.\n\n**ps:** I am setting verbose to FALSE from now on to suppress the progress bar.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownloaded.images <- pa_download_dataspace(available.images[c(3, 11, 21), ],\n                      aoi = central.park,\n                      dir.path = '.',\n                      verbose = FALSE)\n```\n:::\n\n\nWe can look at a true color image using the *pa_get_rgb()* function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrue.color <- pa_get_rgb(downloaded.images, \n                         verbose = FALSE)\npa_plot(true.color)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nAlternatively, we can take a look at vegetation indices, such as the Normalized Difference Vegetation Index (NDVI).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nndvi <- pa_compute_vi(downloaded.images, \n                      vi = 'ndvi',\n                      aoi = central.park,\n                      check.clouds = TRUE,\n                      verbose = FALSE)\npa_plot(ndvi)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nWe cal also look at the Normalized Difference Red Edge (NDRE) index. We can see that the image is at a coarser resolution, when compared to the NDVI image. This is because the Red Edge band in Sentinel-2 is at a 20m resolution, while the bands involved in the NDVI computation are at a 10m resolution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nndre <- pa_compute_vi(downloaded.images, \n                      vi = 'ndre',\n                      aoi = central.park,\n                      check.clouds = TRUE,\n                      verbose = FALSE)\npa_plot(ndre)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nWe can also take a look at the timeseries plot of the median NDRE over Central Park in 2023. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsumm <- summary(ndre, \n                by = central.park,\n                fun = function(x) median(x, na.rm = TRUE))\npa_plot(summ, plot.type = 'timeseries')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n## Conclusion\n\nWe have seen how *pacu* can help us browse, download, and process satellite images for a non-agricultural setting. The workflow for an agricultural field would be nearly identical. We would only need to replace the **area.of.interest**.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}