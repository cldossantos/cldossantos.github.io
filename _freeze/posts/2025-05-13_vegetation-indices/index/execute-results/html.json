{
  "hash": "006eeb5692e3ba75a1d07b941ddbeff8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Specifying custom vegetation indices\"\nauthor: \"Caio dos Santos\"\ndate: \"2025-05-13\"\ncategories: [pacu, remote sensing]\n---\n\n\n\n## Introduction\n\nPart of the motivation for developing **pacu** was to facilitate the access to and the analysis of satellite data. Up until now, users could only use one of the six pre-specified vegetation indices within *pa_compute_vi()*. In an effort to make the package more comprehensive, we have included the option of specifying custom vegetation indices. This gives users the freedom to go beyond the predefined vegetation indices and tailor their analysis to their specific needs! Here, we will go through an example of how to download and process satellite data using **pacu**. Let's get started! \n\n## Data acquisition and processing\n\nWe will use two libraries for this example, [pacu](https://github.com/cldossantos/pacu) and [sf](https://github.com/r-spatial/sf). In case you do not have them installed, you can install them using the following code chunk\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('sf')\n\n## we will install pacu from GitHub because of some newly added features\n## version 0.1.63\nremotes::install_github('cldossantos/pacu')\n```\n:::\n\n\n\n\n\nLet's load the libraries:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(pacu)\n```\n:::\n\n\n\n\nIn this example, we'll focus on the [Ada Hayden Heritage Park](https://maps.app.goo.gl/235ypmts5sEZzVwWA). I will set up the corners here so you do not have to download any files to be able to  follow along. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorners <- matrix( c(-93.639, 42.0758,\n                     -93.6214, 42.0621), \n                   ncol = 2,\n                   byrow = TRUE)\n\ncorners <- st_multipoint(corners)\n\n## defining our area of interest\naoi <- st_as_sf(st_as_sfc(st_bbox(corners)),\n                crs = 4326)\n```\n:::\n\n\n\n\nWe can search for images of the park over a given period and filter them based on cloud coverage. Here, we look for images from May of 2024 and with a maximum cloud coverage of 10%.\n\n*note*: there is a registration step required before you can download images from Copernicus Data Space, please read the [vignette](https://cran.r-project.org/web/packages/pacu/vignettes/pacu_sat.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\navailable.images <- pa_browse_dataspace(aoi, \n                                        start.date = '2024-05-13',\n                                        end.date = '2024-05-19',\n                                        max.cloud.cover = 10)\n```\n:::\n\n\n\nWe have found one image matching our search parameters:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\navailable.images\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSearch parameters\nStart date: 2024-05-13 \nEnd date: 2024-05-19 \nMax. cloud cover: 10%\nCollection name:  SENTINEL-2 \n\nResults\nTotal:  1 \nOnline:  1 \n```\n\n\n:::\n:::\n\n\n\n\nDownloading the image can take some time. On my machine, it took about 7 minutes. Additionally, the image is quite large and can take up a lot of space on the computer. Providing the *aoi* argument ensures that **pacu** will crop the downloaded image to the area of interest. This can save a lot of storage space when working with several images.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownloaded.images <- pa_download_dataspace(available.images,\n                                           dir.path = './raw-data/',\n                                           aoi = aoi,\n                                           verbose = FALSE) ## suppressing the progressbar\n```\n:::\n\n\n\n\nHere, we can take a look at the true color image. It is actually a really pretty lake! \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrgb <- pa_get_rgb(downloaded.images,\n                  verbose = FALSE)\npa_plot(rgb)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\nOne of the pre-built vegeation indices within **pacu** is the Normalized Difference Vegetation Index (NDVI). This VI is often used as an indicator of crop health but in this case, we can see that it also shows us the lake quite well. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nndvi <- pa_compute_vi(downloaded.images,\n                      vi = 'ndvi',\n                      verbose = FALSE)\n\npa_plot(ndvi)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n## Specifying custom vegetation indices\n\nResearchers might be interested in using other vegetation indices to identify water bodies, for example, such as the [Multi-Band Water Index](https://www.sciencedirect.com/science/article/pii/S0303243418300990). \nThis can be done by specifying the mathematical relationship between the Sentinel-2 bands in the *formula* argument of *pa_compute_vi()*. \n\nIt is important to note that there is a mismatch between the resolution of the  bands involved in this computation- some are 10m and others are 20m. The package will recognize that mismatch and resample the finer resolution band to match the coarser resolution ones. This means that the resolution of the output raster is the same as the resolution of the coarsest band involved in the computation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmbwi <- pa_compute_vi(downloaded.images,\n                      vi = 'other',\n                      formula = mbwi ~ (2 * B03 - B04 - B08 - B11 - B12),\n                      verbose = FALSE)\npa_plot(mbwi, palette = 'Blues') ## blue colors for water!\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n## Conclusion\n\nWe have seen the process of acquiring and processing satellite data from Sentinel-2, and a new feature within **pacu** that allows us to specify custom vegetation indices. This gives the user more power to define and explore different indices that might be useful in a different discipline. We'll be back with more **pacu** news later!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}